/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.usuario.view;

import br.com.ifba.usuario.controller.UsuarioIController;
import br.com.ifba.usuario.entity.Usuario;
import jakarta.annotation.PostConstruct;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

/**
 *
 * @author valdo
 */
@Component
@RequiredArgsConstructor
public class TelaUsuario extends javax.swing.JFrame {

    /**
     * Creates new form TelaUsuario
     */
    private final UsuarioIController usuarioController;
    //Inicia os componentes visuais.
    {
        initComponents();
        setLocationRelativeTo(null);
    }

    //A tela inicial é carregada com todos os usuários cadastrados na tabela, e com os botões Alterar e Remover desabilitados (Eles só estarão disponíveis caso um usuário seja selecionado na tabela).
    @PostConstruct
    public void carregarTela() {
        //Permite a seleção de múltiplas linhas na tabela.
        tblUsers.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Realiza a contagem de linhas na tabela.
        tblUsers.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int linhasSelecionadas = tblUsers.getSelectedRowCount();
                lblSelectedUsers.setText(Integer.toString(linhasSelecionadas));

                if (linhasSelecionadas == 1) {
                    desabilitarBotaoCriar();
                } else if (linhasSelecionadas > 1) {
                    desabilitarBotoesCriarAlterar();
                } else {
                    desabilitarBotoesAlterarRemover();
                }
            }
        });
        this.requestFocusInWindow();
        this.atualizarTabela();
        this.desabilitarBotoesAlterarRemover();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtRead = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblSelectedUsers = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsers);

        btnCreate.setText("Criar");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Alterar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Remover");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtRead.setText("Pesquisar...");
        txtRead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtReadMouseClicked(evt);
            }
        });
        txtRead.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtReadKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Usuários selecionados:");

        lblSelectedUsers.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txtRead, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(161, 161, 161))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblSelectedUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(246, 246, 246)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtRead, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblSelectedUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Abre a tela para a criação de um usuário. Somente um usuário pode ser criado por vez.
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
       
        this.txtRead.setText("Pesquisar...");
        this.tblUsers.clearSelection();

        TelaCriarUsuario telaCriarUsuario = new TelaCriarUsuario(usuarioController);
        telaCriarUsuario.vincularTela(this);
        telaCriarUsuario.setVisible(true);
    }//GEN-LAST:event_btnCreateActionPerformed
    //Abre a tela para a alteração das informações de um usuário. Somente um usuário pode ser editado por vez.
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    
        int linhaSelecionada = tblUsers.getSelectedRow();

        Usuario usuarioSelecionado = UsuarioSelecionadoTabela(linhaSelecionada);

        this.txtRead.setText("Pesquisar...");
        this.tblUsers.clearSelection();

        TelaAlterarUsuario telaAlterarUsuario = new TelaAlterarUsuario(usuarioController);
        telaAlterarUsuario.vincularTela(this);
        telaAlterarUsuario.capturarInformacoes(usuarioSelecionado);
        telaAlterarUsuario.setVisible(true);
    }//GEN-LAST:event_btnUpdateActionPerformed
    //Abre um JOptionPane perguntando se deseja remover um ou mais usuários selecionados na tabela.
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int[] linhasSelecionadas = tblUsers.getSelectedRows();

        this.txtRead.setText("Pesquisar...");
        this.tblUsers.clearSelection();

        if (linhasSelecionadas.length == 1) {
            int jOptionPane = JOptionPane.showConfirmDialog(null, "Tem certeza de que deseja remover este usuário?", "Atenção!", JOptionPane.YES_NO_OPTION);

            if (jOptionPane == JOptionPane.YES_OPTION) {
                try {
                    for (int i = 0; i < linhasSelecionadas.length; i++) {
                        int indiceLinhaTabela = linhasSelecionadas[i];
                        Usuario usuarioSelecionado = UsuarioSelecionadoTabela(indiceLinhaTabela);
                        usuarioController.delete(usuarioSelecionado);
                    }

                    JOptionPane.showMessageDialog(null, "Usuário removido com sucesso!");
                    this.atualizarTabela();
                } catch (Exception error) {
                    JOptionPane.showMessageDialog(null, error, "Erro ao remover usuário", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else if (linhasSelecionadas.length > 0) {
            int jOptionPane = JOptionPane.showConfirmDialog(null, "Tem certeza de que deseja remover estes " + linhasSelecionadas.length + " usuários?", "Atenção!", JOptionPane.YES_NO_OPTION);

            if (jOptionPane == JOptionPane.YES_OPTION) {
                try {
                    for (int i = 0; i < linhasSelecionadas.length; i++) {
                        int indiceLinhaTabela = linhasSelecionadas[i];
                        Usuario usuariosSelecionados = UsuarioSelecionadoTabela(indiceLinhaTabela);
                        usuarioController.delete(usuariosSelecionados);
                    }

                    JOptionPane.showMessageDialog(null, linhasSelecionadas.length + " usuários removidos com sucesso!");
                    this.atualizarTabela();
                } catch (Exception error) {
                    JOptionPane.showMessageDialog(null, error, "Erro ao remover usuário", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    //Faz a varredura do texto inserido na barra de pesquisa e exibe os resultados correspondentes (Apenas para Nome e E-mail).
    private void txtReadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReadKeyReleased
        String textoPesquisado = txtRead.getText();

        if (!textoPesquisado.isEmpty()) {
            List<Usuario> usuariosEncontrados = usuarioController.findByNomeContainingIgnoreCaseOrEmailContainingIgnoreCase(textoPesquisado, textoPesquisado);

            TabelaUsuarios tabelaUsuarios = new TabelaUsuarios(usuariosEncontrados);
            tblUsers.setModel(tabelaUsuarios);
        } else {
            this.atualizarTabela();
        }
    }//GEN-LAST:event_txtReadKeyReleased
    //Seleciona a barra de pesquisa para inserção de texto a ser pesquisado.
    private void txtReadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtReadMouseClicked
        this.desabilitarTodosBotoes();
        this.tblUsers.clearSelection();
        this.txtRead.setText("");
    }//GEN-LAST:event_txtReadMouseClicked
    //Captura o índice da linha de um usuário selecionado em determinada linha na tabela e passa para o método "UsuarioSelecionadoTabela".
    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsersMouseClicked
        this.txtRead.setText("Pesquisar...");
        int linhaSelecionada = tblUsers.getSelectedRow();

        Usuario usuario = this.UsuarioSelecionadoTabela(linhaSelecionada);
    }//GEN-LAST:event_tblUsersMouseClicked
    //Retira a seleção da tabela, da caixa de pesquisa e desabilita os botões "Alterar" e "Remover".
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        this.requestFocusInWindow();
        this.desabilitarBotoesAlterarRemover();
        this.tblUsers.clearSelection();
        this.txtRead.setText("Pesquisar...");
        this.atualizarTabela();
    }//GEN-LAST:event_formMouseClicked

   //Atualiza a tabela toda vez que um usuario é adicionado, alterado ou removido.
    public void atualizarTabela() {
        TabelaUsuarios tabelaUsuarios = new TabelaUsuarios(usuarioController.findAll());
        tblUsers.setModel(tabelaUsuarios);
    }

    //Obtém as informações de um ou mais usuarios cadastrados a partir do(s) índice(s) da(s) linha(s) selecionada(s) (Método relacionado ao Evento tblUsersMouseClicked).
    public Usuario UsuarioSelecionadoTabela(int indiceLinhaTabela) {
        TabelaUsuarios tabelaUsuarios = (TabelaUsuarios) tblUsers.getModel();
        Usuario usuario = tabelaUsuarios.getObjetoUsuario(indiceLinhaTabela);
        return usuario;
    }

    //Para quando um usuário está selecionado na tabela.
    private void desabilitarBotaoCriar() {
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
    }

    //Para quando mais de um usuário está selecionado na tabela.
    private void desabilitarBotoesCriarAlterar() {
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(true);
    }

    //Para quando nenhum usuário está selecionado na tabela.
    private void desabilitarBotoesAlterarRemover() {
        btnCreate.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    //Para quando a caixa de pesquisa está selecionada.
    private void desabilitarTodosBotoes() {
        btnCreate.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Realiza a injeção de dependência no UsuarioController.
                UsuarioIController usuarioController = null;
                TelaUsuario telaUsuario = new TelaUsuario(usuarioController);
                telaUsuario.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSelectedUsers;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtRead;
    // End of variables declaration//GEN-END:variables
}
