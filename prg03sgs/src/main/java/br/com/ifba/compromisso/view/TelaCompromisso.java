/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.compromisso.view;

// Importações Necessarias
import javax.swing.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import br.com.ifba.compromisso.entity.Compromisso;
import br.com.ifba.compromisso.service.CompromissoService;
import java.awt.HeadlessException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

/**
 *
 * @author hiane
 */

/**
 * Tela gráfica para gerenciamento de compromissos.
 * Utiliza Spring Boot e JPA para persistência dos dados.
 */
@Component
public class TelaCompromisso extends JFrame {
    
    @Autowired
    private CompromissoService compromissoService;
    
    // Componentes da interface gráfica
    /**private JTextField txtTitulo;
    private JTextField txtDescricao;
    private JTextField txtDataHora;
    private JTextField txtLocal;
    private JButton btnSalvar;
    private JButton btnListar;
    private JTextArea txtAreaCompromissos;
    private JScrollPane jScrollPane1;**/
    
    /**
     * Construtor da tela.
     * Inicializa os componentes gráficos e configura a janela.
     */
    public TelaCompromisso() {
        super("Gerenciamento de Compromissos");
        initComponents(); //Chama o método para inicializar os componentes.
        setLocationRelativeTo(null);
    }
    
    /**
     * Método para salvar um compromisso no banco de dados.
     */
    private void salvarCompromisso() {
        try {
            // Captura os dados informados pelo usuário
            String titulo = txtTitulo.getText();
            String descricao = txtDescricao.getText();
            String dataHoraStr = txtDataHora.getText();
            String local = txtLocal.getText();

            // Verifica se todos os campos estão preenchidos
            if (titulo.isEmpty() || descricao.isEmpty() || dataHoraStr.isEmpty() || local.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos os campos devem ser preenchidos!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Converte a string da data e hora para LocalDateTime
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            LocalDateTime dataHora = LocalDateTime.parse(dataHoraStr, formatter);

            // Cria um objeto Compromisso e salva no banco de dados
            Compromisso compromisso = new Compromisso(null, titulo, descricao, dataHora, local);
            compromissoService.criar(compromisso);

            // Exibe mensagem de sucesso
            JOptionPane.showMessageDialog(this, "Compromisso salvo com sucesso!");

            // Limpa os campos após salvar
            limparCampos();
        } catch (DateTimeParseException e) {
    JOptionPane.showMessageDialog(this, "Formato de data inválido! Use o formato yyyy-MM-dd HH:mm.", "Erro", JOptionPane.ERROR_MESSAGE);
} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(this, "Erro na interface gráfica.", "Erro", JOptionPane.ERROR_MESSAGE);
} }
    
    /**
     * Método para listar compromissos e exibi-los na área de texto.
     */
    private void listarCompromissos () {
        // Limpa a área de texto antes de listar os compromissos
        txtAreaCompromissos.setText("");

        // Busca todos os compromissos no banco de dados
        List<Compromisso> compromissos = compromissoService.listarTodos();

        // Verifica se há compromissos cadastrados
        if (compromissos.isEmpty()) {
            txtAreaCompromissos.setText("Nenhum compromisso encontrado.");
            return;
        }

        // Formata e exibe os compromissos na área de texto
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        for (Compromisso c : compromissos) {
            txtAreaCompromissos.append(
                "Título: " + c.getTitulo() + "\n" +
                "Descrição: " + c.getDescricao() + "\n" +
                "Data/Hora: " + c.getDataHora().format(formatter) + "\n" +
                "Local: " + c.getLocal() + "\n" +
                "-------------------------\n"
            );
        }
    }
    
     /**
     * Método para limpar os campos de entrada após salvar um compromisso.
     */
    private void limparCampos() {
        txtTitulo.setText("");
        txtDescricao.setText("");
        txtDataHora.setText("");
        txtLocal.setText("");
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        txtDescricao = new javax.swing.JTextField();
        txtDataHora = new javax.swing.JTextField();
        txtLocal = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnListar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaCompromissos = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("COMPROMISSO");

        jLabel2.setText("TÍTULO");

        jLabel3.setText("DESCRIÇÃO");

        jLabel4.setText("DATA E HORA");

        jLabel5.setText("LOCAL");

        txtTitulo.setText("jTextField1");

        txtDescricao.setText("jTextField2");

        txtDataHora.setText("jTextField3");

        txtLocal.setText("jTextField4");

        btnSalvar.setText("SALVAR");

        btnListar.setText("LISTAR");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        txtAreaCompromissos.setColumns(20);
        txtAreaCompromissos.setRows(5);
        jScrollPane1.setViewportView(txtAreaCompromissos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(btnSalvar)
                                .addGap(39, 39, 39)
                                .addComponent(btnListar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalvar)
                            .addComponent(btnListar))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        listarCompromissos();
    }//GEN-LAST:event_btnListarActionPerformed

    /**
     * Método principal para iniciar a aplicação.
     * @param args
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(() -> new TelaCompromisso().setVisible(true));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaCompromissos;
    private javax.swing.JTextField txtDataHora;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
