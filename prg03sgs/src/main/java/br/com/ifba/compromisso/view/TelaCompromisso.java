/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.compromisso.view;

import javax.swing.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import br.com.ifba.compromisso.entity.Compromisso;
import br.com.ifba.compromisso.service.CompromissoService;
import java.awt.HeadlessException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

/**
 *
 * @author hiane
 */

/**
 * Tela gráfica para gerenciamento de compromissos.
 * Utiliza Spring Boot e JPA para persistência dos dados.
 */
@Component
public class TelaCompromisso extends JFrame {

    
    // Injeção de dependência do serviço de compromissos
    @Autowired
    private CompromissoService compromissoService;

    // Componentes da interface gráfica
    private JTextField txtTitulo;
    private JTextField txtDescricao;
    private JTextField txtDataHora;
    private JTextField txtLocal;
    private JButton btnSalvar;
    private JButton btnListar;
    private JTextArea txtAreaCompromissos;

    /**
     * Construtor da tela.
     * Inicializa os componentes gráficos e configura a janela.
     */
    public TelaCompromisso() {
        initComponents(); //Chama o método para inicializar os componentes.
        
    }
    /**
     * Método responsável por inicializar os componentes gráficos da tela.
     */
    
    /**
     * Método para salvar um compromisso no banco de dados.
     */
    private void salvarCompromisso() {
        try {
            // Captura os dados informados pelo usuário
            String titulo = txtTitulo.getText();
            String descricao = txtDescricao.getText();
            String dataHoraStr = txtDataHora.getText();
            String local = txtLocal.getText();

            // Verifica se todos os campos estão preenchidos
            if (titulo.isEmpty() || descricao.isEmpty() || dataHoraStr.isEmpty() || local.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos os campos devem ser preenchidos!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Converte a string da data e hora para LocalDateTime
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            LocalDateTime dataHora = LocalDateTime.parse(dataHoraStr, formatter);

            // Cria um objeto Compromisso e salva no banco de dados
            Compromisso compromisso = new Compromisso(null, titulo, descricao, dataHora, local);
            compromissoService.criar(compromisso);

            // Exibe mensagem de sucesso
            JOptionPane.showMessageDialog(this, "Compromisso salvo com sucesso!");

            // Limpa os campos após salvar
            limparCampos();
        } catch (DateTimeParseException e) {
    JOptionPane.showMessageDialog(this, "Formato de data inválido! Use o formato yyyy-MM-dd HH:mm.", "Erro", JOptionPane.ERROR_MESSAGE);
} catch (HeadlessException e) {
    JOptionPane.showMessageDialog(this, "Erro na interface gráfica.", "Erro", JOptionPane.ERROR_MESSAGE);
} }
    
    
     /**
     * Método para listar compromissos e exibi-los na área de texto.
     */
    private void listarCompromissos() {
        // Limpa a área de texto antes de listar os compromissos
        txtAreaCompromissos.setText("");

        // Busca todos os compromissos no banco de dados
        List<Compromisso> compromissos = compromissoService.listarTodos();

        // Verifica se há compromissos cadastrados
        if (compromissos.isEmpty()) {
            txtAreaCompromissos.setText("Nenhum compromisso encontrado.");
            return;
        }

        // Formata e exibe os compromissos na área de texto
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        for (Compromisso c : compromissos) {
            txtAreaCompromissos.append(
                "Título: " + c.getTitulo() + "\n" +
                "Descrição: " + c.getDescricao() + "\n" +
                "Data/Hora: " + c.getDataHora().format(formatter) + "\n" +
                "Local: " + c.getLocal() + "\n" +
                "-------------------------\n"
            );
        }
    }
    
    /**
     * Método para limpar os campos de entrada após salvar um compromisso.
     */
    private void limparCampos() {
        txtTitulo.setText("");
        txtDescricao.setText("");
        txtDataHora.setText("");
        txtLocal.setText("");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 /**
     * Método principal para iniciar a aplicação.
     * @param args
     */
    public static void main(String args[]) {

    SwingUtilities.invokeLater(() -> new TelaCompromisso().setVisible(true));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}